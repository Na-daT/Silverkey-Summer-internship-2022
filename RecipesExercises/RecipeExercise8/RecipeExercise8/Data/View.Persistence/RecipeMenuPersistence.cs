//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.9.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using recipeDatabase.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;

namespace View.Persistence
{
	/// <summary>Static class for (extension) methods for fetching and projecting instances of View.DtoClasses.RecipeMenu from the entity model.</summary>
	public static partial class RecipeMenuPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<recipeDatabase.EntityClasses.RecipeEntity, View.DtoClasses.RecipeMenu>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<recipeDatabase.EntityClasses.RecipeEntity, View.DtoClasses.RecipeMenu> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToRecipeMenu(System.Linq.IQueryable{recipeDatabase.EntityClasses.RecipeEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToRecipeMenu(ref System.Linq.Expressions.Expression<Func<recipeDatabase.EntityClasses.RecipeEntity, View.DtoClasses.RecipeMenu>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToRecipeMenu(EntityQuery{recipeDatabase.EntityClasses.RecipeEntity}, recipeDatabase.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToRecipeMenu(EntityQuery{recipeDatabase.EntityClasses.RecipeEntity}, recipeDatabase.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToRecipeMenuQs(ref System.Linq.Expressions.Expression<Func<View.DtoClasses.RecipeMenu>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static RecipeMenuPersistence() { }
	
		/// <summary>Extension method which produces a projection to View.DtoClasses.RecipeMenu which instances are projected from the 
		/// results of the specified baseQuery, which returns recipeDatabase.EntityClasses.RecipeEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve View.DtoClasses.RecipeMenu instances</returns>
		public static IQueryable<View.DtoClasses.RecipeMenu> ProjectToRecipeMenu(this IQueryable<recipeDatabase.EntityClasses.RecipeEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to View.DtoClasses.RecipeMenu which instances are projected from the 
		/// results of the specified baseQuery using QuerySpec, which returns recipeDatabase.EntityClasses.RecipeEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve View.DtoClasses.RecipeMenu instances</returns>
		public static DynamicQuery<View.DtoClasses.RecipeMenu> ProjectToRecipeMenu(this EntityQuery<recipeDatabase.EntityClasses.RecipeEntity> baseQuery, recipeDatabase.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<View.DtoClasses.RecipeMenu>> projectionAdjustments = null;
			GetAdjustmentsForProjectToRecipeMenuQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ"))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new View.DtoClasses.RecipeMenu()
				{
					Id = RecipeFields.Id.Source("__BQ").ToValue<System.Int32>(),
					Ingredients = (List<View.DtoClasses.RecipeMenuTypes.Ingredient>)qf.Ingredient.TargetAs("__L1_0")
						.CorrelatedOver(RecipeFields.Id.Source("__BQ").Equal(IngredientFields.RecipeId.Source("__L1_0")))
						.Select(() => new View.DtoClasses.RecipeMenuTypes.Ingredient()
						{
							Id = IngredientFields.Id.Source("__L1_0").ToValue<System.Int32>(),
							IsActive = IngredientFields.IsActive.Source("__L1_0").ToValue<System.Boolean>(),
							Name = IngredientFields.Name.Source("__L1_0").ToValue<System.String>(),
						}).ToResultset(),
					Instructions = (List<View.DtoClasses.RecipeMenuTypes.Instruction>)qf.Instruction.TargetAs("__L1_0")
						.CorrelatedOver(RecipeFields.Id.Source("__BQ").Equal(InstructionFields.RecipeId.Source("__L1_0")))
						.Select(() => new View.DtoClasses.RecipeMenuTypes.Instruction()
						{
							Id = InstructionFields.Id.Source("__L1_0").ToValue<System.Int32>(),
							IsActive = InstructionFields.IsActive.Source("__L1_0").ToValue<System.Boolean>(),
							Name = InstructionFields.Name.Source("__L1_0").ToValue<System.String>(),
						}).ToResultset(),
					IsActive = RecipeFields.IsActive.Source("__BQ").ToValue<System.Boolean>(),
					RecipeCategories = (List<View.DtoClasses.RecipeMenuTypes.RecipeCategory>)qf.RecipeCategory.TargetAs("__L1_0")
						.CorrelatedOver(RecipeFields.Id.Source("__BQ").Equal(RecipeCategoryFields.RecipeId.Source("__L1_0")))
						.From(QueryTarget
							.InnerJoin(qf.Category.As("__L1_1")).On(RecipeCategoryFields.CategoryId.Source("__L1_0").Equal(CategoryFields.Id.Source("__L1_1"))))
						.Select(() => new View.DtoClasses.RecipeMenuTypes.RecipeCategory()
						{
							Category = new View.DtoClasses.RecipeMenuTypes.RecipeCategoryTypes.Category()
								{
									IsActive = CategoryFields.IsActive.As("IsActive1").Source("__L1_1").ToValue<System.Boolean>(),
									Name = CategoryFields.Name.Source("__L1_1").ToValue<System.String>(),
								},
							CategoryId = RecipeCategoryFields.CategoryId.Source("__L1_0").ToValue<System.Int32>(),
							IsActive = RecipeCategoryFields.IsActive.Source("__L1_0").ToValue<System.Boolean>(),
						}).ToResultset(),
					Title = RecipeFields.Title.Source("__BQ").ToValue<System.String>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_RecipeMenu 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to View.DtoClasses.RecipeMenu which instances are projected from the
		/// recipeDatabase.EntityClasses.RecipeEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>recipeDatabase.EntityClasses.RecipeEntity instance created from the specified entity instance</returns>
		public static View.DtoClasses.RecipeMenu ProjectToRecipeMenu(this recipeDatabase.EntityClasses.RecipeEntity entity)
		{
			return _compiledProjector(entity);
		}
		
		private static System.Linq.Expressions.Expression<Func<recipeDatabase.EntityClasses.RecipeEntity, View.DtoClasses.RecipeMenu>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<recipeDatabase.EntityClasses.RecipeEntity, View.DtoClasses.RecipeMenu>> mainProjection = p__0 => new View.DtoClasses.RecipeMenu()
			{
				Id = p__0.Id,
				Ingredients = p__0.Ingredients.Select(p__1 => new View.DtoClasses.RecipeMenuTypes.Ingredient()
				{
					Id = p__1.Id,
					IsActive = p__1.IsActive,
					Name = p__1.Name,
				}).ToList(),
				Instructions = p__0.Instructions.Select(p__1 => new View.DtoClasses.RecipeMenuTypes.Instruction()
				{
					Id = p__1.Id,
					IsActive = p__1.IsActive,
					Name = p__1.Name,
				}).ToList(),
				IsActive = p__0.IsActive,
				RecipeCategories = p__0.RecipeCategories.Select(p__1 => new View.DtoClasses.RecipeMenuTypes.RecipeCategory()
				{
					Category = new View.DtoClasses.RecipeMenuTypes.RecipeCategoryTypes.Category()
					{
						IsActive = p__1.Category.IsActive,
						Name = p__1.Category.Name,
					},
					CategoryId = p__1.CategoryId,
					IsActive = p__1.IsActive,
				}).ToList(),
				Title = p__0.Title,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_RecipeMenu 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<recipeDatabase.EntityClasses.RecipeEntity, View.DtoClasses.RecipeMenu>> projectionAdjustments = null;
			GetAdjustmentsForProjectToRecipeMenu(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


