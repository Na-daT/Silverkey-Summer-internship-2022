//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.9.</auto-generated>
//------------------------------------------------------------------------------
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using recipesApp.EntityClasses;

namespace recipesApp
{
	/// <summary>Model builder class for code first development.</summary>
	public partial class RecipesAppModelBuilder
	{
		/// <summary>Builds the model defined in this class with the modelbuilder specified. Called from the generated DbContext</summary>
		/// <param name="modelBuilder">The model builder to build the model with.</param>
		public virtual void BuildModel(ModelBuilder modelBuilder)
		{
			modelBuilder.HasDefaultSchema("public");
			MapCategory(modelBuilder.Entity<Category>());
			MapIngredient(modelBuilder.Entity<Ingredient>());
			MapInstruction(modelBuilder.Entity<Instruction>());
			MapRecipe(modelBuilder.Entity<Recipe>());
			MapRecipeCategory(modelBuilder.Entity<RecipeCategory>());
			MapUser(modelBuilder.Entity<User>());
			MapVersionInfo(modelBuilder.Entity<VersionInfo>().HasNoKey());
		}

		/// <summary>Defines the mapping information for the entity 'Category'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCategory(EntityTypeBuilder<Category> config)
		{
			config.ToTable("category");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("id").HasDefaultValueSql("nextval('\"public\".\"category_id_seq\"')");
			config.Property(t => t.Name).HasColumnName("name").HasMaxLength(100).IsRequired();
			config.Property(t => t.IsActive).HasColumnName("is_active");
		}

		/// <summary>Defines the mapping information for the entity 'Ingredient'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapIngredient(EntityTypeBuilder<Ingredient> config)
		{
			config.ToTable("ingredient");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("id").HasDefaultValueSql("nextval('\"public\".\"ingredient_id_seq\"')");
			config.Property(t => t.RecipeId).HasColumnName("recipe_id");
			config.Property(t => t.Name).HasColumnName("name").HasMaxLength(1000).IsRequired();
			config.HasOne(t => t.Recipe).WithMany(t => t.Ingredients).HasForeignKey(t => t.RecipeId);
		}

		/// <summary>Defines the mapping information for the entity 'Instruction'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapInstruction(EntityTypeBuilder<Instruction> config)
		{
			config.ToTable("instruction");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("id").HasDefaultValueSql("nextval('\"public\".\"instruction_id_seq\"')");
			config.Property(t => t.RecipeId).HasColumnName("recipe_id");
			config.Property(t => t.Name).HasColumnName("name").HasMaxLength(1000).IsRequired();
			config.HasOne(t => t.Recipe).WithMany(t => t.Instructions).HasForeignKey(t => t.RecipeId);
		}

		/// <summary>Defines the mapping information for the entity 'Recipe'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapRecipe(EntityTypeBuilder<Recipe> config)
		{
			config.ToTable("recipe");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("id").HasDefaultValueSql("nextval('\"public\".\"recipe_id_seq\"')");
			config.Property(t => t.Title).HasColumnName("title").HasMaxLength(100).IsRequired();
			config.Property(t => t.IsActive).HasColumnName("is_active");
		}

		/// <summary>Defines the mapping information for the entity 'RecipeCategory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapRecipeCategory(EntityTypeBuilder<RecipeCategory> config)
		{
			config.ToTable("recipe_category");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("id").HasDefaultValueSql("nextval('\"public\".\"recipe_category_id_seq\"')");
			config.Property(t => t.RecipeId).HasColumnName("recipe_id").HasConversion(new Microsoft.EntityFrameworkCore.Storage.ValueConversion.CastingConverter<System.Int64, System.Int32>());
			config.Property(t => t.CategoryId).HasColumnName("category_id").HasConversion(new Microsoft.EntityFrameworkCore.Storage.ValueConversion.CastingConverter<System.Int64, System.Int32>());
			config.HasOne(t => t.Category).WithMany(t => t.RecipeCategories).HasForeignKey(t => t.CategoryId);
			config.HasOne(t => t.Recipe).WithMany(t => t.RecipeCategories).HasForeignKey(t => t.RecipeId);
		}

		/// <summary>Defines the mapping information for the entity 'User'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapUser(EntityTypeBuilder<User> config)
		{
			config.ToTable("user");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("id").HasDefaultValueSql("nextval('\"public\".\"user_id_seq\"')");
			config.Property(t => t.Username).HasColumnName("username").HasMaxLength(100).IsRequired();
			config.Property(t => t.Password).HasColumnName("password").HasMaxLength(100).IsRequired();
			config.Property(t => t.IsActive).HasColumnName("is_active");
			config.Property(t => t.RefreshToken).HasColumnName("refresh_token");
			config.Property(t => t.RefreshTokenExpiry).HasColumnName("refresh_token_expiry");
		}

		/// <summary>Defines the mapping information for the entity 'VersionInfo'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapVersionInfo(EntityTypeBuilder<VersionInfo> config)
		{
			config.ToTable("VersionInfo");
			config.Property(t => t.Version);
			config.Property(t => t.AppliedOn);
			config.Property(t => t.Description).HasMaxLength(1024);
		}
	}


	/// <summary>Extensions class for extension methods used in the model builder code</summary>
	internal static partial class RecipesAppModelBuilderExtensions
	{
		private static readonly string READONLY_ANNOTATION = "custom:readonly";

		/// <summary>Extension method which is used by the context class to determine whether an entity is readonly</summary>
		/// <typeparam name="TEntity">The type of the entity.</typeparam>
		/// <param name="builder">The entity type builder object to augment.</param>
		/// <returns>the passed in entity type builder</returns>
		internal static EntityTypeBuilder<TEntity> IsReadOnly<TEntity>(this EntityTypeBuilder<TEntity> builder)
			where TEntity : class
		{
			builder.HasAnnotation(READONLY_ANNOTATION, true);
			return builder;
		}
		
		/// <summary>Determines whether the passed in entity type has the readonly annotation set.
		/// </summary>
		/// <param name="entity">The entity type to check.</param>
		/// <returns>true if the entity type is marked as read-only, false otherwise</returns>
		public static bool IsReadOnly(this IEntityType entity)
		{
			var annotation = entity.FindAnnotation(READONLY_ANNOTATION);
			return annotation != null && (bool)annotation.Value;
		}
	}
}

